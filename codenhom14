// Kh·ªüi t·∫°o c√°c th∆∞ vi·ªán s·ª≠ d·ª•ng
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <WiFi.h>
#include <ThingSpeak.h>
#include <HTTPClient.h>
// KHAI B√ÅO WEBHOOK DISCORD
const char* discordWebhook = "https://discord.com/api/webhooks/1389916477053993161/RAcXub2j4cDuW1pxZgu2mb7SQyVjMqNmSTIOG06CM7vMnkSHqqS94Jr6swcXyN4P16m6";
// khai b√°o wifi v√† ID/key c·ªßa Thinkspeak
const char* WIFI_NAME = "Tung123";
const char* WIFI_PASSWORD = "123456789";
const int myChannelNumber =2998518 ;///ID c·ªßa k√™nh
const char* myApiKey = "YTQO8MM2EBM2YYUP"; ///Write API Key
const char* server = "api.thingspeak.com";
WiFiClient  client;
// Khai b√°o ƒë·ªëi t∆∞·ª£ng MPU6050
Adafruit_MPU6050 mpu;

// ƒê·ªãnh nghƒ©a ch√¢n k·∫øt n·ªëi tr√™n ESP32
#define SDA_PIN 21         // Ch√¢n SDA n·ªëi MPU6050
#define SCL_PIN 22         // Ch√¢n SCL n·ªëi MPU6050
#define BUZZER_PIN 4       // Ch√¢n ƒëi·ªÅu khi·ªÉn c√≤i/buzzer

// H√ÄM G·ª¨I TIN NH·∫ÆN DISCORD
void sendDiscordAlert(String message) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(discordWebhook);
    http.addHeader("Content-Type", "application/json");
    String payload = "{\"content\": \"" + message + "\"}";
    int httpResponseCode = http.POST(payload);
    if (httpResponseCode > 0) {
      Serial.print("üì§ Discord g·ª≠i th√†nh c√¥ng: ");
      Serial.println(httpResponseCode);
    } else {
      Serial.print("‚ùå Discord g·ª≠i l·ªói: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
}

void setup(void) {
  Serial.begin(115200);     // Kh·ªüi ƒë·ªông Serial ƒë·ªÉ debug
  // Kh·ªüi ƒë·ªông I2C v·ªõi ch√¢n SDA v√† SCL t√πy ch·ªânh
  Wire.begin(SDA_PIN, SCL_PIN);
  Serial.println("ESP32 - MPU6050 Test");
  // Kh·ªüi ƒë·ªông MPU6050 v·ªõi giao ti·∫øp Wire t√πy ch·ªânh
  if (!mpu.begin(0x68, &Wire)) {
    Serial.println("Kh√¥ng t√¨m th·∫•y MPU6050!");
    while (1) delay(10);
  }
  Serial.println("MPU6050 ƒë√£ k·∫øt n·ªëi!");

  // Thi·∫øt l·∫≠p d·∫£i ƒëo gia t·ªëc
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range: ");
  switch (mpu.getAccelerometerRange()) {
    case MPU6050_RANGE_2_G: Serial.println("¬±2G"); break;
    case MPU6050_RANGE_4_G: Serial.println("¬±4G"); break;
    case MPU6050_RANGE_8_G: Serial.println("¬±8G"); break;
    case MPU6050_RANGE_16_G: Serial.println("¬±16G"); break;
  }
  // Thi·∫øt l·∫≠p d·∫£i ƒëo con quay h·ªìi chuy·ªÉn
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range: ");
  switch (mpu.getGyroRange()) {
    case MPU6050_RANGE_250_DEG: Serial.println("¬±250¬∞/s"); break;
    case MPU6050_RANGE_500_DEG: Serial.println("¬±500¬∞/s"); break;
    case MPU6050_RANGE_1000_DEG: Serial.println("¬±1000¬∞/s"); break;
    case MPU6050_RANGE_2000_DEG: Serial.println("¬±2000¬∞/s"); break;
  }
  // Thi·∫øt l·∫≠p bƒÉng th√¥ng l·ªçc
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  Serial.print("Filter bandwidth: ");
  switch (mpu.getFilterBandwidth()) {
    case MPU6050_BAND_260_HZ: Serial.println("260 Hz"); break;
    case MPU6050_BAND_184_HZ: Serial.println("184 Hz"); break;
    case MPU6050_BAND_94_HZ:  Serial.println("94 Hz"); break;
    case MPU6050_BAND_44_HZ:  Serial.println("44 Hz"); break;
    case MPU6050_BAND_21_HZ:  Serial.println("21 Hz"); break;
    case MPU6050_BAND_10_HZ:  Serial.println("10 Hz"); break;
    case MPU6050_BAND_5_HZ:   Serial.println("5 Hz"); break;
  }
  // thi·∫øt l·∫≠p k·∫øt n·ªëi wifi
  WiFi.begin(WIFI_NAME, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED){
    delay(1000);
    Serial.println("Wifi not connected");
  }
  Serial.println("Wifi connected !");
  Serial.println("Local IP: " + String(WiFi.localIP()));
  WiFi.mode(WIFI_STA);
  // kh·ªüi ch·∫°y thinkspeak
  ThingSpeak.begin(client);
  // Thi·∫øt l·∫≠p ch√¢n c√≤i l√† OUTPUT
  pinMode(BUZZER_PIN, OUTPUT);

  delay(100);
}

void loop() {
  // ƒê·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // In gia t·ªëc
  Serial.print("Acceleration X: "); Serial.print(a.acceleration.x);
  Serial.print(", Y: "); Serial.print(a.acceleration.y);
  Serial.print(", Z: "); Serial.print(a.acceleration.z);
  Serial.println(" m/s^2");

  // In con quay
  Serial.print("Rotation X: "); Serial.print(g.gyro.x);
  Serial.print(", Y: "); Serial.print(g.gyro.y);
  Serial.print(", Z: "); Serial.print(g.gyro.z);
  Serial.println(" rad/s");

  // In nhi·ªát ƒë·ªô
  Serial.print("Temperature: ");
  Serial.print(temp.temperature);
  Serial.println(" ¬∞C");
 // T√≠nh t·ªïng gia t·ªëc
  float accelTotal = sqrt(a.acceleration.x * a.acceleration.x +
                          a.acceleration.y * a.acceleration.y +
                          a.acceleration.z * a.acceleration.z);

  Serial.print("Gia t·ªëc t·ªïng: ");
  Serial.println(accelTotal);
  // G·ª¨I D·ªÆ LI·ªÜU L√äN THINKSPEAK THEO C√ÅC FIELD ƒê√É THI·∫æT L·∫¨P S·∫¥N
  Serial.println("Sending data to ThingSpeak...");
  ThingSpeak.setField(1, temp.temperature);
  ThingSpeak.setField(2, a.acceleration.x);
  ThingSpeak.setField(3, a.acceleration.y);
  ThingSpeak.setField(4, a.acceleration.z);
  ThingSpeak.setField(5, g.gyro.x);
  ThingSpeak.setField(6, g.gyro.y);
  ThingSpeak.setField(7, g.gyro.z);
  ThingSpeak.setField(8, accelTotal);
  int status = ThingSpeak.writeFields(myChannelNumber, myApiKey);

  // Ng∆∞·ª°ng t√© ng√£ gi·∫£ ƒë·ªãnh: gia t·ªëc > 20 m/s^2
  if (accelTotal > 20) {
    Serial.println("‚ö†Ô∏è C·∫¢NH B√ÅO: PH√ÅT HI·ªÜN T√â NG√É!");
    digitalWrite(BUZZER_PIN, HIGH);
    // G·ª≠i l√™n Discord
    sendDiscordAlert("üö® PH√ÅT HI·ªÜN T√â NG√É! ƒê·ªÄ NGH·ªä KH·∫®N C·∫§P KI·ªÇM TRA!");
  }
  else{
    digitalWrite(BUZZER_PIN, LOW);
  }

  Serial.println("");
  delay(500); // ƒê·ª£i 1 gi√¢y tr∆∞·ªõc l·∫ßn ƒë·ªçc ti·∫øp theo
}

